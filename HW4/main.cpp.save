
// Francis Troy Kirinhakone, 11429784
// HW #4
// CptS 223 - Advanced Data Structures

#include "SortingAlgorithims.h"

#include <iostream> //std::cout std::endl;
#include <string> //std::string
#include <cstdlib> //std::find;
#include <vector>

using std::cout; using std::endl;
using std::string;
using std::find;

int main (void)
{

//print name
cout << "Francis Troy Kirinhakone, 11429784" << endl;

//create array
SortAlg workArray;;

vector<Item> my_Array;

//stay in command loop until quit() is entered
    while(true)
    {
        string cmd; //command string
        getline(std::cin, cmd);//get character input from terminal and assign to cmd

        //finds and assigns the parameters to c_str_par
            string parameter = ""; //new string "paramater" itilitzed to empty string


            parameter = cmd.substr(cmd.find("("));//substring from first '(' to null terminator
            parameter = parameter.substr(1, parameter.length()-2);//substring from +1 of prev string to -2 of length of string to remove 2nd ')'


        if(cmd.find("quit(") == 0) {break;} //breaks cmd loop and returns Done

        else if(cmd.find("set(") == 0) { //parameter (num1Val,num1Index; ...)
            workArray.Set(parameter);
        }

        else if(cmd.find("insertion(") == 0)
        {
            workArray.insertion();
        }

        else if(cmd.find("shell(") == 0)
        {
            int gap_1, gap_2, gap_3; //initilize gap vals
            int comma = 0;
            string temp_str = ""; //temp string for stoi

            for(int i = 0; i < parameter.size() -1; i++){
                if(parameter[i] == ',')
                    comma++;
            }

            //convert string of gap vals to int vals
            if(comma = 0){
            temp_str = parameter.substr(0, parameter.find(","));
            gap_1 = stoi(temp_str);
            }
            
            if(comma = 1){
            parameter = parameter.substr(2);
            temp_str = parameter.substr(0, parameter.find(","));
            gap_2 = stoi(temp_str);
            
            parameter = parameter.substr(2);

            temp_str = parameter.substr(0, parameter.find(","));
            gap_3 = stoi(temp_str);

            ///testing
            cout << "gaps:" << gap_1 << "," << gap_2 << "," << gap_3 << endl;
            //
set(961,0;748,1;328,2;292,3;352,4;197,5;917,6;552,7;427,8;889,9;33,10;452,11;141,12;129,13;607,14;341,15;690,16;532,17;240,18;766,19;362,20;116,21;502,22;75,23;488,24;693,25;763,26;553,27;402,28;74,29;707,30;258,31;960,32;203,33;696,34;655,35;77,36;252,37;144,38;773,39;432,40;516,41;808,42;944,43;650,44;90,45;266,46;336,47;224,48;658,49;814,50;929,51;691,52;750,53;635,54;115,55;148,56;679,57;623,58;5,59;616,60;483,61;68,62;852,63;544,64;555,65;728,66;77,67;550,68;356,69;55,70;431,71;170,72;251,73;165,74;595,75;136,76;294,77;900,78;737,79;569,80;227,81;306,82;470,83;588,84;128,85;592,86;567,87;675,88;81,89;320,90;326,91;184,92;420,93;61,94;135,95;948,96;979,97;713,98;194,99;681,100;16,101;401,102;818,103;189,104;888,105;526,106;435,107;446,108;300,109;473,110;820,111;623,112;719,113;847,114;598,115;261,116;714,117;484,118;955,119;663,120;426,121;440,122;706,123;427,124;537,125;283,126;395,127;869,128;3,129;563,130;155,131;736,132;520,133;207,134;207,135;935,136;146,137;282,138;843,139;160,140;703,141;911,142;715,143;164,144;4,145;271,146;345,147;880,148;925,149;904,150;893,151;760,152;626,153;208,154;123,155;997,156;948,157;746,158)
            //run shell()
            workArray.shell(gap_1, gap_2, gap_3);


        }

        else if(cmd.find("merge_sort(") == 0)
        {
            workArray.merge_sort();
        }

        else if(cmd.find("partition(") == 0)
        {
            int pivot;
            pivot = stoi(parameter);

            workArray.partition_(pivot);
        }

        else if(cmd.find("quick_sort(") == 0)
        {
            workArray.quick_sort();
        }

        else if(cmd.find("print(") == 0) {workArray.printArray();}

    }
    return 1;
}
